#Welcome and thanks for wanting to become a polkadex validator. Below is some information to help you start up a node
#that also includes some security settings, and a monitoring/notification system if there happens to be an error.
#All lines that have a # in front are just comments explaining what each command does to help you understand.
#The first thing you need to do is rent out a VPS that has ubuntu 22.04(this is crucial as older versions have outdated glibc that is required for the parachain)
#and at min 8gb of ram to start and 400+gb of storage and 10+tb of bandwidth per month, you may need to upgrade
#your server as the blockchain evolves and requires more resources.  Once you have the ip address and login info to your
#server, the first thing to do is download putty https://the.earth.li/~sgtatham/putty/latest/w64/putty-64bit-0.78-installer.msi
#putty is a windows ssh client to allow you to connect to your server. Enter the ip address type pdex node under saved sessions,
#than click save so its easy to access.  Now click open and connect to your server by entering in root as your username, and the
#password you defined when you purchased your server

#first thing we want to do is add a new user so we are not logging in as root, make sure to change username to something unique to you
adduser username

#now we want to add that username to the sudo list so it has access to admin priviledges on the server
usermod -aG sudo username

#now we want to verify we can login with this new user account so open up another session of putty and login with the new username you created
#if you can successfully login go ahead and close the other putty window
#now we want to remove the root account from being able to ssh into the server.
#when you use sudo, it will ask for a password, enter in the password you used when you added the new user
sudo nano /etc/ssh/sshd_config

#now we want to change the following line
   PermitRootLogin yes
#to
   PermitRootLogin no
   
#now hit cntl-x to save and exit

#anytime we change something about a service we want to restart it afterwards
sudo systemctl restart sshd

#now lets verify we can no longer ssh into the server with the root account so open up another putty client and try to login with root with the root password
#it should state access denied - which is exactly what we want, close this window.

#first lets update our system to latest packages - this may take some time.
sudo apt-get update
sudo apt-get upgrade

#now lets setup a firewall that only allows access to the ports we need and block everything else unless our server requests a connection
#when it asks you to save rules go ahead and hit yes
sudo apt install iptables-persistent

#now we need to configure the rules for ipv4
sudo nano /etc/iptables/rules.v4

#paste the following until you see a line that says #stop paste. Where it says yourip, make sure to insert your ip address from http://whatismyip.com
#from your pc you are using, not the server, theres 3 different spots to edit that.
#port 30333 is for polkadex node, port 9100 is to verify node_exporter works, port 9090 is to verify prometheus works, port 3000 is for grafana


*filter
# Allow all outgoing, but drop incoming and forwarding packets by default
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Custom per-protocol chains
:UDP - [0:0]
:TCP - [0:0]
:ICMP - [0:0]

# Acceptable UDP traffic

# Acceptable TCP traffic
-A TCP -p tcp --dport 22 -j ACCEPT
-A TCP -p tcp --dport 30333 -j ACCEPT
-A TCP -p tcp --dport 3000 -s yourip -j ACCEPT
-A TCP -p tcp --dport 9100 -s 127.0.0.1,yourip -j ACCEPT
-A TCP -p tcp --dport 9090 -s 127.0.0.1,yourip -j ACCEPT

# Acceptable ICMP traffic

# Boilerplate acceptance policy
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT

# Drop invalid packets
-A INPUT -m conntrack --ctstate INVALID -j DROP

# Pass traffic to protocol-specific chains
## Only allow new connections (established and related should already be handled)
## For TCP, additionally only allow new SYN packets since that is the only valid
## method for establishing a new TCP connection
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
-A INPUT -p tcp --syn -m conntrack --ctstate NEW -j TCP
-A INPUT -p icmp -m conntrack --ctstate NEW -j ICMP

# Reject anything that's fallen through to this point
## Try to be protocol-specific w/ rejection message
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -j REJECT --reject-with icmp-proto-unreachable

# Commit the changes
COMMIT

*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT

*security
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT

#stop paste
#save and exit remember its cntl-x and y

#now lets set the ipv6 rules for the firewall
sudo nano /etc/iptables/rules.v6

#paste the following until you see #stop paste:


*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*raw
:PREROUTING DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*nat
:PREROUTING DROP [0:0]
:INPUT DROP [0:0]
:OUTPUT DROP [0:0]
:POSTROUTING DROP [0:0]
COMMIT

*security
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*mangle
:PREROUTING DROP [0:0]
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
:POSTROUTING DROP [0:0]
COMMIT

#stop paste
#save and exit the file

#now lets restart the firewall
sudo service netfilter-persistent reload

#lets verify the new rules are in place
sudo iptables -L

#you should see a bunch of accept/drop/reject lines now

#now lets install sshguard which will help block any traffic that is hammering our server
sudo apt-get install sshguard

#goto  http://whatismyip.com and copy your ip address that you will use to connect to your server
#now lets add our ip address to sshguard so we cannot be blocked
sudo nano /etc/sshguard/whitelist

#add your copied ip here
#save and exit

#now we need to restart sshguard so it knows the new whitelist we created 
sudo systemctl restart sshguard

#now lets get the polkadex node going as it will take time to download the database
#first we need prequired applications
sudo apt install curl unzip

#and now we need to create a polkadex user account that cannot login to the server
sudo useradd --shell /usr/sbin/nologin polkadex

#now lets create a new directory for the polkadex node
sudo mkdir /home/polkadex

#lets enter that new directory
cd /home/polkadex

#lets download the latest parachain and solochain releases first
sudo curl -O -L https://github.com/Polkadex-Substrate/parachain/releases/download/v1.0.0/parachain-polkadex-node
sudo curl -O -L https://github.com/Polkadex-Substrate/parachain/releases/download/v1.0.0/polkadot-parachain-raw.json
sudo curl -O -L https://github.com/Polkadex-Substrate/parachain/releases/download/v1.0.0/polkadot.json
sudo chmod +x parachain-polkadex-node
sudo curl -O -L https://github.com/Polkadex-Substrate/Polkadex/releases/download/v5.4.0/PolkadexNodeUbuntu.zip
sudo unzip PolkadexNodeUbuntu.zip

#and now lets set permissions for the polkadex user
sudo chown -R polkadex:polkadex /home/polkadex

#first we need to let the parachain fully sync up before continuing make sure to change YOURNAMEHERE this will take 2+hours, if you see in telemetry at this 
#url https://telemetry.polkadot.io/#list/0x72f3bba34b1ecd532bccbed46701ad37c4ef329bfe86b7cf014ac06cb92ed47d  if you see your node held up over 15min on producing a block
#just cntl c and stop the process hit the up arrow and restart the process with same command until its fully syncd to the finalized block
sudo runuser -u polkadex -- /home/polkadex/parachain-polkadex-node --chain=/home/polkadex/polkadot-parachain-raw.json --port 40333 --ws-port 9902 --rpc-port 8844 --name "YOURNAMEHERE" --telemetry-url 'wss://telemetry.polkadot.io/submit/ 0' --bootnodes /ip4/3.108.191.170/tcp/40333/p2p/12D3KooWKi39o5WvzPTFz8W2KMqjP5c9HWoY2naYGPVF1YANCFnC -- --execution wasm --chain /home/polkadex/polkadot.json --port 30343 --ws-port 9977 --state-pruning 256 --sync warp

#once the parachain is fully synced lets create its service file and restart it up as a service
sudo nano /etc/systemd/system/parachain.service
#paste the following lines until you see #stop past make sure you change YOURNAMEHERE to something specific to you
[Unit]
Description=Polkadex Parachain Service
After=network-online.target
Wants=network-online.target

[Service]
User=polkadex
Group=polkadex
ExecStart=/home/polkadex/parachain-polkadex-node --chain=/home/polkadex/polkadot-parachain-raw.json --port 40333 --ws-port 9902 --rpc-port 8844 --name "YOURNAMEHERE" --telemetry-url 'wss://telemetry.polkadot.io/submit/ 1' --bootnodes /ip4/3.108.191.170/tcp/40333/p2p/12D3KooWKi39o5WvzPTFz8W2KMqjP5c9HWoY2naYGPVF1YANCFnC -- --execution wasm --chain /home/polkadex/polkadot.json --port 30343 --ws-port 9977 --state-pruning 256 --sync warp
Restart=on-failure

[Install]
WantedBy=multi-user.target

#stop paste

#now we can hit cntrl-c and kill the parachain process after its been syncd and start it up as a service
sudo systemctl daemon-reload
sudo systemctl enable parachain.service
sudo systemctl start parachain.service

#this should verify it is all active and working
sudo systemctl status parachain

#once the parachain is fully syncd up and running as service now we need to sync up the solochain datasource
#there is a current issue with the blockchain that we cannot sync from scratch without sync=warp flag, thus its recommended to download the latest snapshot
#from here https://polkachu.com/substrate_snapshots/polkadex and follow those steps after running the next line for 2 min and than cntl-c and exit out of it
#(so it can create the initial db structure for you)
sudo runuser -u polkadex -- ./polkadex-node --chain=/home/polkadex/customSpecRaw.json --pruning=archive

#now as that is starting to download the blockchain we might as well continue configuring the server with a new putty client so go ahead and open
#up a new putty and login again so we can continue configuring and watch the progress of the polkadex node in our other window

#first we need to make the solochain service file to automatically start up

sudo nano /etc/systemd/system/polkadex.service
#paste the following lines until you see #stop paste make sure you change YOURNAMEHERE
[Unit]
Description=Polkadex Validator Service
After=network-online.target
Wants=network-online.target

[Service]
User=polkadex
Group=polkadex
ExecStart=/home/polkadex/polkadex-node --validator --chain=/home/polkadex/customSpecRaw.json --name 'YOURNAMEHERE' --telemetry-url 'wss://telemetry.polkadot.io/submit/ 0'
Restart=on-failure

[Install]
WantedBy=multi-user.target

#stop paste
#save and exit

#at this point we are just waiting for the database to finish downloading if all you want to install is polkadex.  I personally prefer
#to install prometheus, node exporter, alert manager, grafana and nginx for monitoring and a notification system. If you would like those services
#skip to ###EXTRA and remember to come back here once you are fully done installing everything. If you dont wish to install anything else, once the database 
#is synched up ie target= is same as finalized # , go ahead and cntrl-c and stop that process from running. 



#now lets start it back up as a validator with our service file we created
sudo systemctl daemon-reload
sudo systemctl enable polkadex
sudo systemctl start polkadex

#this should verify it is all active and working
sudo systemctl status polkadex

#now lets grab our session keys
curl -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "author_rotateKeys", "params":[]}' http://localhost:9944

#and lastly we head over to https://github.com/Polkadex-Substrate/Polkadex/blob/mainnet-release/docs/run-a-validator.md and follow the sections BOND PDEX and 
#Set Session Keys and Validate in polkadot.js to finalize our polkadex node with the blockchain


###EXTRA 

#since it takes time to download the database we might as well get the rest of the server setup.
#first we need to download the packages. if any lines have && at the end copy all the lines together and paste it as one thing. if you dont you may
#need to hit cntl-c to exit it as && signifies lets run multiple lines together

cd $HOME
sudo apt install -y adduser libfontconfig1
wget https://github.com/prometheus/prometheus/releases/download/v2.42.0/prometheus-2.42.0.linux-amd64.tar.gz &&
wget https://github.com/prometheus/alertmanager/releases/download/v0.25.0/alertmanager-0.25.0.linux-amd64.tar.gz &&
wget https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz &&
wget https://dl.grafana.com/enterprise/release/grafana-enterprise_9.4.3_amd64.deb

sudo apt install nginx

#now lets extract them.
tar xvf prometheus-*.tar.gz &&
tar xvf node_exporter-*.tar.gz &&
tar xvf alertmanager-*.tar.gz &&
sudo dpkg -i grafana*.deb

#now lets install the binaries to /usr/local/bin
sudo cp ./prometheus-*.linux-amd64/prometheus /usr/local/bin/ &&
sudo cp ./prometheus-*.linux-amd64/promtool /usr/local/bin/ &&
sudo cp -r ./prometheus-*.linux-amd64/consoles /etc/prometheus &&
sudo cp -r ./prometheus-*.linux-amd64/console_libraries /etc/prometheus &&
sudo cp ./node_exporter-*.linux-amd64/node_exporter /usr/local/bin/ &&
sudo cp ./alertmanager-*.linux-amd64/alertmanager /usr/local/bin/ &&
sudo cp ./alertmanager-*.linux-amd64/amtool /usr/local/bin/

#install alert manager plugin for grafana
sudo grafana-cli plugins install camptocamp-prometheus-alertmanager-datasource

#create dedicated users for each service that cannot login to server
sudo useradd --no-create-home --shell /usr/sbin/nologin prometheus &&
sudo useradd --no-create-home --shell /usr/sbin/nologin node_exporter &&
sudo useradd --no-create-home --shell /usr/sbin/nologin alertmanager

#create extra directories for configs
sudo mkdir /var/lib/prometheus && 
sudo mkdir /etc/alertmanager &&
sudo mkdir /var/lib/alertmanager &&
sudo mkdir /etc/node_exporter

#change ownership of everything now
sudo chown prometheus:prometheus /etc/prometheus/ -R &&
sudo chown prometheus:prometheus /var/lib/prometheus/ -R &&
sudo chown prometheus:prometheus /usr/local/bin/prometheus &&
sudo chown prometheus:prometheus /usr/local/bin/promtool &&
sudo chown node_exporter:node_exporter /usr/local/bin/node_exporter &&
sudo chown node_exporter:node_exporter /etc/node_exporter &&
sudo chown alertmanager:alertmanager /etc/alertmanager/ -R &&
sudo chown alertmanager:alertmanager /var/lib/alertmanager/ -R &&
sudo chown alertmanager:alertmanager /usr/local/bin/alertmanager &&
sudo chown alertmanager:alertmanager /usr/local/bin/amtool

#now we need to create the config files 
sudo runuser -u prometheus -- nano /etc/prometheus/prometheus.yml

#paste the following until you see #stop paste and edit the username and password fields:


# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - localhost:9093
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  - 'rules.yml'

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"
    scrape_interval: 5s
    scheme: https
    basic_auth:
      username: username
      password: password
    tls_config:
      cert_file: prometheus.crt
      key_file: prometheus.key
      ca_file: node_exporter.crt
      insecure_skip_verify: true

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["localhost:9090"]
  - job_name: "node"
    scrape_interval: 5s
    scheme: https
    basic_auth:
      username: username
      password: password
    tls_config:
      cert_file: prometheus.crt
      key_file: prometheus.key
      ca_file: node_exporter.crt
      insecure_skip_verify: true
    static_configs:
      - targets: ["localhost:9100"]

  - job_name: "substrate_node"
    scrape_interval: 5s
    static_configs:
      - targets: ["localhost:9615"]

  - job_name: "parachain_node"
    scrape_interval: 5s
    static_configs:
      - targets: ["localhost:9616"]

#stop paste
#exit and save the file

#now to create the rules file
sudo runuser -u prometheus -- nano /etc/prometheus/rules.yml

#paste the following until you see #stop paste presuming you are running multiple nodes make sure to identify each one properly by changing SERVER#:


groups:
  - name: alert_rules
    rules:
      - alert: InstanceDown
        expr: up == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "SERVER# Instance [{{ $labels.instance }}] down"
          description: "SERVER# [{{ $labels.instance }}] of job [{{ $labels.job }}] has been down for more than 1 minute."

      - alert: HostHighCpuLoad
        expr: 100 - (avg by(instance)(rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: "SERVER# Host high CPU load (instance bLd Kusama)"
          description: "SERVER# CPU load is > 80%\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
		  
#stop paste
#exit and save

#now we need to create our htpasswd in encrypted form make sure to change yourpasswordhere to the password you wish to use
sudo apt-get install apache2-utils
sudo htpasswd -bnBC 10 "" yourpasswordhere | grep -oP '\$2[ayb]\$.{56}'
#you should see on the screen something like  $2y$10$dJni99haEH.GKueye8sgKucdUwuePONi7RZON   #copy that info


#Now lets create basic auth login
sudo runuser -u prometheus -- nano /etc/prometheus/web.yml

#paste the following until you see #stop paste remember to change username to what you want to use and change password to that $2y$10..... output you received:


tls_server_config:
      cert_file: prometheus.crt
      key_file: prometheus.key
basic_auth_users:
  username: password

#stop paste
#exit and save

#now we need to create the ssl certs for prometheus
sudo openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout prometheus.key -out prometheus.crt

#when it asks for Common Name make sure you insert the external ip of your server or dns qualified name

#lets change permissions and put the certs in their proper location.
sudo chown prometheus:prometheus prometheus.*
sudo mv prometheus.* /etc/prometheus

#now lets verify the config is proper
promtool check config /etc/prometheus/prometheus.yml &&
promtool check rules /etc/prometheus/rules.yml

#now for node_exporter
sudo runuser -u node_exporter -- nano /etc/node_exporter/config.yml

#paste the following until you see #stop paste:


    tls_server_config:
      cert_file: node_exporter.crt
      key_file: node_exporter.key

#stop paste
#save and exit

#now lets make our ssl certs for node_exporter
sudo openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout node_exporter.key -out node_exporter.crt

#when it asks for Common Name make sure you insert the external ip of your server or dns qualified name

#need the CA file for prometheus and with right permissions
sudo cp node_exporter.crt /etc/prometheus &&
sudo chown -R prometheus:prometheus /etc/prometheus

#node exporter needs its keys as well
sudo mv node_exporter.* /etc/node_exporter &&
sudo chown -R node_exporter:node_exporter /etc/node_exporter

#now we need to setup our gmail account to accept app passwords, please follow these instructions https://support.google.com/mail/answer/185833?hl=en

#now lets configure alert manager
sudo runuser -u alertmanager -- nano /etc/alertmanager/alertmanager.yml

#paste the following until you see #stop paste and change your email address and enter in the app password you just generated:


global:
 resolve_timeout: 1m

route:
 receiver: 'gmail-notifications'

receivers:
- name: 'gmail-notifications'
  email_configs:
  - to: user@gmail.com
    from: user@gmail.com
    smarthost: smtp.gmail.com:587
    auth_username: user@gmail.com
    auth_identity: user@gmail.com
    auth_password: password
    send_resolved: true
	
#stop paste
#save and exit


#need to create our data directory
sudo mkdir -p /data/alertmanager

#time to create service files
sudo nano /etc/systemd/system/prometheus.service

#paste the following until you see #stop paste:


[Unit]
Description=Prometheus
Documentation=https://prometheus.io/docs/introduction/overview/
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=prometheus
Group=prometheus
ExecReload=/bin/kill -HUP $MAINPID
ExecStart=/usr/local/bin/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/var/lib/prometheus \
  --web.config.file=/etc/prometheus/web.yml \
  --web.console.templates=/etc/prometheus/consoles \
  --web.console.libraries=/etc/prometheus/console_libraries \
  --web.listen-address=0.0.0.0:9090 \
  --web.external-url=

SyslogIdentifier=prometheus
Restart=always

[Install]
WantedBy=multi-user.target

#stop paste
#save and exit

#second service file
sudo nano /etc/systemd/system/node_exporter.service

#paste the following until you see #stop paste:


[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target
StartLimitIntervalSec=500
StartLimitBurst=5
[Service]
User=node_exporter
Group=node_exporter
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/node_exporter --web.config.file=/etc/node_exporter/config.yml
[Install]
WantedBy=multi-user.target
EOF

#stop paste
#save and exit

#third service file
sudo nano /etc/systemd/system/alertmanager.service

#paste the following until you see #stop paste, make sure to change serverip to your servers ip:


[Unit]
Description=AlertManager Server Service
Wants=network-online.target
After=network-online.target

[Service]
User=alertmanager
Group=alertmanager
Type=simple
ExecStart=/usr/local/bin/alertmanager --config.file /etc/alertmanager/alertmanager.yml --web.external-url=http://serverip:9093 --cluster.advertise-address='0.0.0.0:9093'


[Install]
WantedBy=multi-user.target


#stop paste
#save and exit


#configure nginx
sudo nano /etc/nginx/conf.d/prometheus

#paste the following until you see #stop paste make sure to change YOURSERVERIP to the external ip or qualified domain name of your server:


server {
    listen 80;
    listen [::]:80;
    server_name YOURSERVERIP;
    access_log            /var/log/nginx/access80.log;
    return 302 https://$server_name$request_uri;
}

server {

    listen 443 ssl;
    listen [::]:443 ssl;
    include snippets/self-signed.conf;
    include snippets/ssl-params.conf;

    server_name YOURSERVERIP;

    access_log            /var/log/nginx/access443.log;

    location / {

      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      proxy_pass          https://localhost:9090;
      proxy_read_timeout  90;

      proxy_redirect      https://localhost:9090 https://YOURSERVERIP;
    }

}

#stop paste
#save and exit

#lets test the config
sudo nginx -t 

#restart nginx process
sudo systemctl restart nginx

#now lets cross our fingers and see if these services startup

sudo systemctl daemon-reload &&
sudo systemctl start prometheus.service &&
sudo systemctl start node_exporter.service &&
sudo systemctl start alertmanager.service &&
sudo systemctl start grafana-server.service

#lets verify they all started, if not look at `sudo tail -n 50 /var/log/syslog` to help diagnose the issue
systemctl status prometheus.service
systemctl status node_exporter.service
systemctl status alertmanager.service
systemctl status grafana-server.service

#activate services in case of a reboot
sudo systemctl enable prometheus.service &&
sudo systemctl enable node_exporter.service &&
sudo systemctl enable alertmanager.service &&
sudo systemctl enable grafana-server

#test you can receive an email alert
curl -H "Content-Type: application/json" -d '[{"labels":{"alertname":"Test"}}]' localhost:9093/api/v1/alerts

# verify you can connect to https://serverip:9090/targets make sure to change serverip to yours and they should all be green with status UP
# just click yes and advanced as its giving an error due to us creating our own self signed cert which we trust.

#login to grafana for first time, login is admin/admin.  browse to http://serverip:3000

#First thing you will need to do is on the left side click the settings gear icon, and goto datasource and click add new data source
#We want to add 2 of them, the first is Prometheus AlertManager.

#for URL set it to http://localhost:9093
#enable basic auth and type in your username and password that you have set in prometheus.yml  click save and test
#now click back and we want to add data source and this time we add prometheus

#settings for prometheus:

url is https://localhost:9090
enable basic auth, tls client auth, skip tls verify, with credentials and with ca cert
type in username and password that you have set in prometheus.yml

# usually what i do is type in  `less /etc/prometheus/node_exporter.crt` from my ssh client than highlight contents which copies it to clipboard if using putty.
for ca cert we want to copy the contents of /etc/prometheus/node_exporter.crt  
for client cert we want to copy the contents of /etc/prometheus/prometheus.crt
for client key we want to copy the contents of /etc/prometheus/prometheus.key

servername is your server_ip

#than click save and test.   Click the dashboard icon on the left, and goto import.
#Where it says import via grafana.com type in 13840 and click load.  Now you should see something called Polkadot Essentials 2021 as a dashboard 
#make sure to define the prometheus alertmanager and prometheus data sources at the bottom and than click import

#You should now see a ton of panels on your screen and the top half should all be actually working, ie showing the cpu usage, ram usage etc.
#Sadly im not sure of an easier way to do this without manually editing the rest of the panels but i will leave the info to paste for each one to get it to working
#Click on panel title and click edit

#for the following we are changing the code listed in the Metrics Browser field.

Height of chain = substrate_block_height{}
block finalized = substrate_block_height{status="finalized"}
network bytes per second = rate(substrate_sub_libp2p_network_bytes_total{}[5m])
block rate = rate(substrate_block_height{status="finalized"}[10m])*60
txs count = substrate_ready_transactions_number{}
peers count = substrate_sub_libp2p_peers_count{}
state cache = substrate_state_cache_bytes{}
queued block (sync) = substrate_sync_queued_blocks{}
relative block production = rate(substrate_block_height{status="finalized"}[10m])/rate(substrate_block_height{status="finalized"}[1m])
blocks av by min = increase(substrate_block_height{status=~"finalized|sync_target"}[1m])
diff best block -> finalized = scalar(substrate_block_height{status="best"})-scalar(substrate_block_height{status="finalized"})
running tasks = rate(substrate_tasks_polling_started_total{}[1m]) - rate(substrate_tasks_polling_duration_count{}[1m])
sync justifications = substrate_sync_extra_justifications{}
grandpa validator messages = rate(substrate_finality_grandpa_communication_gossip_validator_messages{}[5m])


#Now if you got this far make sure to go back to ###EXTRA and finish off setting up the node once it has done being synched for first time and you are all set :)
